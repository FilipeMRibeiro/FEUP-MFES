class Hospital

types
	public String = Utils`String;
		
instance variables
	private id: nat1;
	private doctors: set of Doctor := {};
	--private users: set of User := {};   --> users are always assigned to some doctor
	private specialties: set of String := {};
	private subsystems: set of String := {};
	
	
	--ids should always be unique
	/*
	inv not exists d1, d2 in set doctors & d1 <> d2 and d1.getId() = d2.getId();
	inv not exists u1, u2 in set users & u1 <> u2 and u1.getId() = u2.getId();
	*/
		
operations
	--Hospital constructor
	public Hospital : nat1 ==> Hospital
	Hospital(i) == (
		id := i;
		return self)
	post doctors = {} and id = i;
	
	--Get the hospital id
	public getId: () ==> nat1
	getId() == (
		return id
	);
	
	--Get doctors in hospital
	public getDoctors: () ==> set of Doctor
	getDoctors() == (
		return doctors
	);
	
	
	--Get users in hospital
	/*
	public getUsers: () ==> set of User
	getUsers() == (return users);
	*/
	
	--Add a doctor to hospital
	public addDoctor: Doctor ==> ()
	addDoctor(d) == (
		doctors := {d} union doctors
	;)
	pre not d in set doctors
	post doctors = {d} union doctors~; --the ~ symbol on the variable indicates the value of the state variable before execution of the operation

	--Add a user to hospital
	/*
	public addUser: User ==> ()
	addUser(d) == (users := {d} union users;)
	pre not d in set users
	post users = {d} union users~;
	*/
	
	--Add specialty
	public addSpecialty: String ==> ()
	addSpecialty(s) == (
		specialties := {s} union specialties
	;)
	pre not s in set specialties
	post specialties = {s} union specialties~;
	
	--Get available specialities
	public getSpecialties: () ==> set of String
	getSpecialties() == (
		return specialties
	);
	
		--Add subsystem
	public addSubsystem: String ==> ()
	addSubsystem(s) == (
		subsystems := {s} union subsystems
	;)
	pre not s in set subsystems
	post subsystems = {s} union subsystems~;
	
	--Get available subsystems
	public getSubsystems: () ==> set of String
	getSubsystems() == (
		return subsystems
	);
	
	
end Hospital