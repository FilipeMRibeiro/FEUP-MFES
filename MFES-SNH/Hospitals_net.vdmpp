class Hospitals_net

types
	public String = StringUtils`String;

instance variables
	private hospitals: set of Hospital := {};
	private doctors: set of Doctor := {};
	private users: set of User := {};
	
	--ids should always be unique
	/*
	inv not exists h1, h2 in set hospitals & h1 <> h2 and h1.getId() = h2.getId();
	inv not exists d1, d2 in set doctors & d1 <> d2 and d1.getId() = d2.getId();
	inv not exists u1, u2 in set users & u1 <> u2 and u1.getId() = u2.getId();
	*/
	
		
operations
	--Hospitals_net constructor
	public Hospitals_net : () ==> Hospitals_net
	Hospitals_net() == (
		return self)
	post hospitals = {} and doctors = {} and users = {} and hospitals = {};
	
	--Get the net's hospitals
	public getHospitals: () ==> set of Hospital
	getHospitals() == (
		return hospitals
	);
	
	--Get doctors in the net
	public getDoctors: () ==> set of Doctor
	getDoctors() == (
		return doctors
	);
	
	--Get users in the net
	public getUsers: () ==> set of User
	getUsers() == (
		return users
	);
	
	--Add a doctor to net
	public addDoctor: Doctor ==> ()
	addDoctor(d) == (
		doctors := {d} union doctors
	;)
	pre not d in set doctors
	post doctors = {d} union doctors~; --the ~ symbol on the variable indicates the value of the state variable before execution of the operation

	--Add a user to net
	public addUser: User ==> ()
	addUser(d) == (
		users := {d} union users
	;)
	pre not d in set users
	post users = {d} union users~;
	
	--Add a hospital to net
	public addHospital: Hospital ==> ()
	addHospital(h) == (
		hospitals := {h} union hospitals
	;)
	pre not h in set hospitals
	post hospitals = {h} union hospitals~;
	
	--Get all doctors from a given specialty
	public getSpecialtyDoctors: String ==> set of Doctor
	getSpecialtyDoctors(s) == (
		dcl ret: set of Doctor := {}; --var local
		for all doc in set doctors do
			if(doc.getSpecialty() = s) then
				ret := ret union {doc};
		return ret;
	);		
	
	--Get all hospitals with a given specialty
	public getHospitalsSpecialty: String ==> set of Hospital
	getHospitalsSpecialty(s) == (
		dcl ret: set of Hospital := {};
		for all hosp in set hospitals do
			if(s in set hosp.getSpecialties()) then
				ret := ret union {hosp};
			return ret;
	);
		
	--Get all hospitals with a given subsystem
	public getHospitalsSubsystems: String ==> set of Hospital
	getHospitalsSubsystems(s) == (
		dcl ret: set of Hospital := {};
		for all hosp in set hospitals do
			if(s in set hosp.getSubsystems()) then
				ret := ret union {hosp};
			return ret;
	);
		

	--Get doctor with minimum waiting time for a given specialty
	public getMinWaitDoc: String ==> Doctor
	getMinWaitDoc(s) == (
		dcl sset: set of Doctor := getSpecialtyDoctors(s);
		dcl md: Doctor;
		dcl min: nat := 99;
		for all doc in set sset do
			if(doc.waitingTime() < min) then
				md := doc;
			return md;
	);						

	--Return true if a doctor is in a given hospital
	public docInHospital: Doctor * Hospital ==> bool
	docInHospital(d, h) == (
		for all doc in set h.getDoctors() do
			if(d = doc) then
			return true;
		return false;
	);
	
	--Get the hospitals where a given doctor works
	public docHospitals: Doctor ==> set of Hospital
	docHospitals(d) == (
		dcl ret: set of Hospital := {};
		for all hosp in set hospitals do
			if(docInHospital(d,hosp)) then
				ret := ret union {hosp};
			return ret;
	);
		 
end Hospitals_net